#!/bin/bash
# unitc - a curl wrapper for configuring NGINX Unit
# NGINX, Inc. (c) 2022

# Defaults
#
QUIET=0
BOLD=$(tput smso)
NORM=$(tput rmso)
SHOW_LOG=1
IS_REMOTE=0

usage() {
        if [ $# -gt 0 ]
        then
          local varname=$1
          echo "${BOLD} $varname is missing please set $varname and try again."
          echo ${NORM}
        fi

	echo "${0##*/} - a curl wrapper for configuring NGINX Unit"
	echo ""
	echo "-h: This message"
	echo "-m: <method> GET / PUT / POST / DELETE / INSERT"
	echo "-u: <uri> URI or unit config path"
        echo "-i: <IP> IP address of remote host"
        echo "-p: <port> port on remote host (80 is default)"
        echo ""
	echo " URI is for the Unit configuration API, e.g. /config"
	echo " --quiet (-q) Will not monitor the error log after config changes"
	echo ""
	echo " • Configuration JSON is read from stdin"
	echo " • Default HTTP method is PUT for config changes, else GET"
	echo " • Virtual method INSERT adds to beginning of array"
	echo " • Options can appear in any position, e.g. method after URI"
	echo " • The control socket is automatically detected"
	echo ""
	exit 1
}

check_unit_running() {
  # Check if Unit is running, find the main process
  #
  PID=($(ps ax | grep unit:\ main | grep -v \ grep | awk '{print $1}'))
  if [ ${#PID[@]} -eq 0 ]; then
  	echo "${0##*/}: INFO: unitd not running locally.... assuming remote"
        IS_REMOTE=1
  	#echo "${0##*/}: ERROR: unitd not running"
  	#exit 1
  elif [ ${#PID[@]} -gt 1 ]; then
  	echo "${0##*/}: ERROR: multiple unitd processes detected (${PID[@]})"
  	exit 1
  else 
        IS_REMOTE=0
  fi
}

while getopts "i:m:p:u:h" o; do
    case "${o}" in
        h)
            usage
            ;;
        m)
            METHOD=$(echo ${OPTARG} | tr '[a-z]' '[A-Z]')
            ;;
	u)
	    URI=${OPTARG}
	    ;;
        i)  REMOTE_IP=${OPTARG}
            ;;
        p)  REMOTE_PORT=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
set -x
[ $# = 0 ] && usage
[ -z "$METHOD" ] && METHOD="GET"
[ -z "$URI" ] && usage uri

#shift $((OPTIND-1))

check_unit_running
if [ $IS_REMOTE -eq 1 ]
then
  # If we are using a remote connection then we will need to have both the IP and the port.
  # There is no checking of proper quad notation for IP address
  [ -z "$REMOTE_IP" ] && usage "remote IP address"
  [ -z "$REMOTE_PORT" ] && usage "port"
fi

# Read the significant unitd conifuration from cache file (or create it)
#
if [ -r /tmp/${0##*/}.$PID.env ]; then
	source /tmp/${0##*/}.$PID.env
else
	# Check we have all the tools we need in $PATH
	#
	MISSING=$(hash unitd curl ps grep cut tr sed tail sleep 2>&1 | cut -f4 -d: | tr -d '\n')
	if [ "$MISSING" != "" ]; then
		echo "${0##*/}: ERROR: cannot find$MISSING: please install or add to \$PATH"
		exit 1
	fi

        # Only do this if IS_REMOTE is not true, this means that unitc is running locally on the unit server
        if [ "$IS_REMOTE" -eq 0 ] ; then
	        PARAMS=$(ps $PID | grep unitd | cut -f2- -dv | tr '[]' ' ' | cut -f4- -d ' ' | sed -e 's/ --/\n--/g')

	        # Get control address
	        #
	        CTRL_ADDR=$(echo "$PARAMS" | grep '\--control' | cut -f2 -d' ')
	        if [ "$CTRL_ADDR" = "" ]; then
	        	CTRL_ADDR=$(unitd --help | grep -A1 '\--control' | tail -1 |  cut -f2 -d\")
	        fi

	        # Prepare for network or Unix socket addressing
	        #
	        if [ $(echo $CTRL_ADDR | grep -c ^unix:) -eq 1 ]; then
	        	SOCK_FILE=$(echo $CTRL_ADDR | cut -f2- -d:)
	        	if [ -r $SOCK_FILE ]; then
	        		CURL_ADDR="--unix-socket $SOCK_FILE _"
	        	else
	        		echo "${0##*/}: ERROR: cannot read unitd control socket: $SOCK_FILE"
	        		ls -l $SOCK_FILE
	        		exit 2
	        	fi
                fi
                # If we run locally on the unit server, but the control address is 0.0.0.0 curl will fail
                LOCAL_IP_AND_PORT=$(echo $CTRL_ADDR | grep -c ':')
                if [ $LOCAL_IP_AND_PORT -eq 1 ] 
                then
                  echo "${0##*/}: INFO: running locally, unit is bound to ip and port combination"
                  LOCAL_IP=$(echo $LOCAL_IP_AND_PORT | cut -d ':' -f1)
                  LOCAL_PORT=$(echo $LOCAL_IP_AND_PORT | cut -d ':' -f2)
            
                fi
               
        # This is where we pass in ip and port
	else
                CURL_ADDR="http://${REMOTE_IP}:${REMOTE_PORT}"
	fi

	# Get error log filename
	#
	ERROR_LOG=$(echo "$PARAMS" | grep '\--log' | cut -f2 -d' ')
	if [ "$ERROR_LOG" = "" ]; then
		ERROR_LOG=$(unitd --help | grep -A1 '\--log' | tail -1 | cut -f2 -d\")
	fi

	# Cache the discovery for this unit PID (and cleanup any old files)
	#
	rm /tmp/${0##*/}.* 2> /dev/null
	echo CURL_ADDR=\"${CURL_ADDR}\" > /tmp/${0##*/}.$PID.env
	echo ERROR_LOG=${ERROR_LOG} >> /tmp/${0##*/}.$PID.env
fi

# Test for jq
#
if hash jq 2> /dev/null; then
	PRETTY="jq"
else
	PRETTY="cat"
fi

# Get current length of error log before we make any changes
#
if [ -f $ERROR_LOG ] && [ -r $ERROR_LOG ]; then
	LOG_LEN=$(wc -l < $ERROR_LOG)
else
	QUIET=1
fi

# Adjust HTTP method and curl params based on presence of stdin payload
#
if [ -t 0 ]; then
	if [ "$METHOD" = "DELETE" ]; then
		curl -X $METHOD $CURL_ADDR$URI 2> /tmp/${0##*/}.$$ | $PRETTY
	else
		SHOW_LOG=$(echo $URI | grep -c ^/control/)
		curl $CURL_ADDR$URI 2> /tmp/${0##*/}.$$ | $PRETTY
	fi
else
	if [ "$METHOD" = "INSERT" ]; then
		if [ "$PRETTY" != "jq" ]; then
			echo "${0##*/}: ERROR: jq(1) is required to use INSERT method, install at <https://stedolan.github.io/jq/>"
			exit 1
		fi
		CURR_VAL=$(curl -s $CURL_ADDR$URI)
		if [ "$(echo $CURR_VAL | jq -r type)" = "array" ]; then
			SUFFIX=$(cat)
			echo $CURR_VAL | jq ". |= [$SUFFIX] + ." | curl -X PUT --data-binary @- $CURL_ADDR$URI 2> /tmp/${0##*/}.$$ | $PRETTY
		else
			echo "${0##*/}: ERROR: INSERT method must be used with an array"
			exit 3
		fi
	else
		echo "$(cat)" | curl -X $METHOD --data-binary @- $CURL_ADDR$URI 2> /tmp/${0##*/}.$$ | $PRETTY
	fi
fi

CURL_STATUS=${PIPESTATUS[0]}
if [ $CURL_STATUS -ne 0 ]; then
	echo "${0##*/}: ERROR: curl(1) exited with an error ($CURL_STATUS)"
	if [ $CURL_STATUS -eq 7 ]; then
		echo "${0##*/}: Check that you have permission to access the Unit control socket, or try again with sudo(8)"
	else
		cat /tmp/${0##*/}.$$ && rm /tmp/${0##*/}.$$
	fi
	exit 4
fi
rm /tmp/${0##*/}.$$ 2> /dev/null

if [ $SHOW_LOG -gt 0 ] && [ $QUIET -eq 0 ]; then
	echo -n "${0##*/}: Waiting for log..."
	sleep $SHOW_LOG
	echo ""
	sed -n $((LOG_LEN+1)),\$p $ERROR_LOG
fi
